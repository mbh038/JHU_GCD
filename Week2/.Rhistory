my.data
dimnames("my.data")
dimnames(my.data)
my.data$name<-NULL
my.data
rownames(my.data)<-c("Bob","Sue","Mike","Debs","Jon")
my.data
mydata("Mike","age")
my.data["Mike","age"]
my.data[order(my.data$weight),]
my.data
my.data[order(my.data$weight),]->my.data.sorted
my.data
my.data.sorted
rm(my.data.sorted)
ls()
my.data[4,2]<-58
my.data
my.data$weight=my.data$weight*2.2
my.data
my.data$weight/2.2->my.data$weight
my.data
my.data.copy=my.data
ls()
my.data$weight/2.2->my.data$weight
my.data
my.data.copy
my.data=my.data.copy
my.data
ls()
my.data$height=c(186,167,166,178,190)
my.data
example(contour)
ls()
rm(list=ls())
ls()
x
x=c(seq(1,.1,100))
x=c(seq(1,100))
x
x=c(seq(1,100,.1))
x
x=c(seq(1,2*pi(),.1))
pi
x=c(seq(0,2*pi,.1))
x
ls()
y=sin(x)
y
my.data=data.frame(x,y)
my.data
plot(my.data)
plot(my.data)
plot(my.data)
z=cos(x)
my.data$z<-z
my.data
plot(my.data)
ls()
rm(x,y,z)
ls()
ggplot(my.data)
package(ggplot2)
ls()
install.packages("ggplot2")
gplot(my.data)
ggplot(my.data)
library("ggplot2", lib.loc="~/R/win-library/3.1")
ggplot(data = my.data, aes(x = x, y = z))
a<-ggplot(data = my.data, aes(x = x, y = z))
a
a<-ggplot(data = my.data, aes(x = x, y = z))+ geom_point(size = 5)
a
a<-ggplot(data = my.data, aes(x = x, y = z))+ geom_point(size = 2)
a
a<-ggplot(data = my.data, aes(x = x, y = y))+ geom_point(size = 2)
a
ggplot(data = my.data, aes(x = x, y = y))+ geom_point(size = 2)
a<-ggplot(data = my.data, aes(x = x, y = y))+ geom_point(size = 2)
a<-ggplot(data = my.data, aes(x = x, y = y))
a
a<-a+geom_point(2)
a<-a+geom_point()
a
<- a + xlab("Time") + ylab("Amplitude") + ggtitle("Oscillator")
a<- a + xlab("Time") + ylab("Amplitude") + ggtitle("Oscillator")
a
a<-ggplot(data=my.data,aes(x=x,y=y,col=z))+geom_point()
a
a<- a + xlab("Time") + ylab("Amplitude") + ggtitle("Oscillator")
a
q()
install.packages(swirl)
install.packages("swirl")
library(swirl)
swirl()
x<-c(44,NA,5,NA)
x*3
y<-rnorm(1000)
z<-rep(NA,1000)
my_data<-sample(c(y,z),100)
my_na<-is.na(my_data)
my_na
my_data==NA
sum(my_NA)
sum(my_na)
my_data
0/0
inf/inf
inf-inf
Inf-Inf
x
x[1:10]
x[is.na(x)]
y<-x[!is.na(x)]
y
y[y>0]
x[x>0]
x[!is.na(x)& x>0]
x[c(3,5,7)]
x[0]
x[3000]
x[c(-2,-10)]
x[-c(2,10)]
vect<-c(foo=11,bar=2,norf=NA)
vect
names(vect)
vect2<-c(11,2,NA)
names(vect2)<-c("foo","bar","norf")
identical(vect,vect2)
vect["bar"]
vect[c("foo","bar")]
*list item 3
install.packages("KernSmooth R")
library(KernSmooth R)
library("KernSmooth R")
library("rmarkdown", lib.loc="~/R/win-library/3.1")
library("swirl", lib.loc="~/R/win-library/3.1")
library("KernSmooth", lib.loc="C:/Program Files/R/R-3.1.3/library")
rm(list=ls())
y<-data.frame(a=1,b="a")
dput(y)
dput(y,file="y.R")
new.y<-dget("y.R")
new.y
x<-"foo"
y<-c(1,2)
dump(c("x","y"),file="xy.R")
rm(x,y)
source("xy.R")
x
y
str(dump)
str(dget)
str(file)
cube<-function(x,n){x^n}
cube(3)
cube<-function(x,n){x^3}
cube(2,5)
x<-1:10
if(x>5){
x<-0
}
y<-1:10
y<-0
y
swirl()
my_vector<-1:20
my_vector
dim(my_vector)
length(my_vector)
dim(my_vector)<-c(4,5)
dim(my_vector)
attributes(my_vector)
my_vector
class(my_vector)
my_matrix<-my_vector
?matrix
my_matrix2<-matrix(1:20,nrow=4,ncol=5)
identical(my_matrix,my_matrix2)
patients<-c("Bill","Gina","Kelly","Sean")
cbind(patients,my_matrix)
my_data<-data.frame(patients,my_matrix)
my_data
class(my_data)
cnames<-c("patient","age","weight","bp","rating","test")
colnames(my_data)<-cnames
my_data
TRUE==TRUE
(FALSE==TRUE)==FALSE
6==7
6<7
10<=10
5!=7
5!==7
5!=7
!(5==7)
FALSE & FALSE
TRUE & c(TRUE,FALSE, FALSE)
TRUE && c(TRUE,FALSE, FALSE)
TRUE | c(TRUE,FALSE,FALSE)
TRUE || c(TRUE,FALSE,FALSE)
5 > 8 || 6 != 8 && 4 > 3.9
isTRUE(6>4)
identical("twins","twins")
xor(5==6,!FALSE)
ints<-sample(10)
ints
ints>5
which(ints>7)
any(ints<0)
all(ints>0)
library(datasets)
data(mtcars)
summary(mtcars)
str(mtcars)
tapply(mtcars$mpg,mycars$cyl,mean)
tapply(mtcars$mpg,mtcars$cyl,mean)
cyl8<-subset(mtcars,mtcars$cyl==8)
str(cyl8)
mean8<-mean(cyl8$mpg)
mean8
hpt<-tapply(mtcars$hp,mtacrs$cyl,mean)
hpt<-tapply(mtcars$hp,mtcars$cyl,mean)
hpt
hpt[3]-hpt[1]
debug(ls)
ls()
exit
q
?debug
q
q
q
q
q
q
q
str(mtcars)
debug(ls)
debug(ls)
ls()
debug(ls)
ls()
set.seed(1)
rpois(5, 2)
rpois(5,2)
set.seed(10)
x <- rep(0:1, each = 5)
e <- rnorm(10, 0, 20)
y <- 0.5 + 2 * x + e
set.seed(10)
x <- rep(0:1, each = 5)
e <- rnorm(10, 0, 20)
y <- 0.5 + 2 * x + e
x
e
y
ploy(y)
plot(y)
plot(x,y)
install.packages("lubridate")
swirl()
library(lubridate)
install.packages("ggplot2")
library("ggplot2", lib.loc="~/R/win-library/3.2")
library("lubridate", lib.loc="~/R/win-library/3.2")
install.packages("tidyr")
library("tidyr", lib.loc="~/R/win-library/3.2")
install.packages("swirl")
library("swirl", lib.loc="~/R/win-library/3.2")
library("tidyr", lib.loc="~/R/win-library/3.2")
swirl()
library(swirl)
install_from_swirl("Getting and Cleaning Data")
swirl()
library(tidyr)
students
?gather
gather(students,sex,count,-grade)
students2
res<-gather(students2,sex_class,count,-grade)
res
?separate
separate(res,sex_class,c("sex","class"))
submit()
students3
submit()
?spread()
?spread
submit()
submit()
extract_numeric("class5")
?mutate
submit()
submit()
submit()
submit()
?extract_numeric
submit()
submit()
submit()
students4
submit()
submit()
submit()
passed
failed
passed<-mutate(passed,status="passed")
failed<-mutate(passed,status="failed")
failed<-mutate(failed,status="failed")
bind_rows(passed,failed)
sat
submit()
submit()
?separate
submit()
submit()
?plot
plot(sin,-pi,2*pi)
?par
library(datasets)
hist(airquality$Ozone)
with(airquality,plot(wind,Ozone))
with(airquality,plot(Wind,Ozone))
?transform
str(airquality)
airquality<-transform(airquality,Month=factor(Month))
str(airquality)
boxplot(Ozone~Month)
boxplot(Ozone~Month,airquality)
boxplot(Ozone~Month,airquality,xlab="Month,ylab="Ozone"")
boxplot(Ozone~Month,airquality,xlab="Month",ylab="Ozone"")
boxplot(Ozone~Month,airquality,xlab="Month",ylab="Ozone")
par(bg=3)
boxplot(Ozone~Month,airquality,xlab="Month",ylab="Ozone")
par(bg=1)
boxplot(Ozone~Month,airquality,xlab="Month",ylab="Ozone")
par(bg=2)
boxplot(Ozone~Month,airquality,xlab="Month",ylab="Ozone")
par(bg=999)
boxplot(Ozone~Month,airquality,xlab="Month",ylab="Ozone")
par(bg="transparent")
boxplot(Ozone~Month,airquality,xlab="Month",ylab="Ozone")
par("ch")
with(airquality,plot(wind,Ozone)
)
with(airquality,plot(Wind,Ozone)
)
title(Main="Ozone ans wind in New York City")
title(main="Ozone ans wind in New York City")
title(main="Ozone and wind in New York City")
with(airquality,plot(wind,Ozone),title(main="Ozone ans wind in New York City"))
with(airquality,plot(wind,Ozone),title(main="Ozone ans wind in New York City"))
with(airquality,plot(Wind,Ozone),title(main="Ozone ans wind in New York City"))
with(subset(airquality,Month==5),points(Wind,Ozone,col="blue"))
with(subset(airquality,Month!=5),points(Wind,Ozone,col="red"))
with(airquality,plot(Wind,Ozone),title(main="Ozone ans wind in New York City"),type="n")
with(airquality,plot(Wind,Ozone),
title(main="Ozone ans wind in New York City"),type="n")
with(subset(airquality,Month==5),points(Wind,Ozone,col="blue"))
with(subset(airquality,Month!=5),points(Wind,Ozone,col="red"))
legend("topright",pch=1,col=c("blue","red"),legend=c("May","not May"))
with(airquality,plot(Wind,Ozone),
title(main="Ozone ans wind in New York City"),pch=20)
model<-lm(Ozone~Wind,airquality)
with(airquality,plot(Wind,Ozone),
title(main="Ozone ans wind in New York City"),pch=20)
model<-lm(Ozone~Wind,airquality)
abline(model,lwd=2)
with(airquality,plot(Wind,Ozone),
title(main="Ozone ans wind in New York City"),pch=20)
model<-lm(Ozone~Wind,airquality)
abline(model,lwd=2)
par(mfrow=c(1,2))
with(airquality,{
plot(Wind,Ozone),main="Ozone and wind",
plot(Solar.R,Ozone,main="Ozone and Solar Radiation")
})
par(mfrow=c(1,2))
with(airquality,{
plot(Wind,Ozone),main="Ozone and wind"),
plot(Solar.R,Ozone,main="Ozone and Solar Radiation")
})
par(mfrow=c(1,2))
with(airquality,{
plot(Wind,Ozone,main="Ozone and wind"),
plot(Solar.R,Ozone,main="Ozone and Solar Radiation")
})
par(mfrow=c(1,2))
with(airquality,{
plot(Wind,Ozone,main="Ozone and wind")
plot(Solar.R,Ozone,main="Ozone and Solar Radiation")
})
setwd("C:/Users/Mike/Rspace/JHU_GCD/Week2")
library("httpuv", lib.loc="~/R/win-library/3.2")
library("httr", lib.loc="~/R/win-library/3.2")
library("jsonlite", lib.loc="~/R/win-library/3.2")
library("dplyr", lib.loc="~/R/win-library/3.2")
library("sqldf", lib.loc="~/R/win-library/3.2")
##Answers to GCD, Quiz Two
## Q1
library(httr)
library(httpuv)
library(dplyr)
# 1. Find OAuth settings for github:
#    http://developer.github.com/v3/oauth/
oauth_endpoints("github")
# 2. To make your own application, register at at
#    https://github.com/settings/applications. Use any URL for the homepage URL
#    (http://github.com is fine) and  http://localhost:1410 as the callback url
#    Have registered mbhApp at https://github.com/settings/applications/200176
#    These are key and secret for mbhApp
myapp <- oauth_app("github",
key = "5d271b52351635520bd9",
secret = "a149c55ab80572469ebe313609845ddf66b62325")
# 3. Get OAuth credentials
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp,cache="FALSE")
# 4. Use API
gtoken <- config(token = github_token)
req <- GET("https://api.github.com/users/jtleek/repos", gtoken)
stop_for_status(req)
content(req)
# OR:
#    req <- with_config(gtoken, GET("https://api.github.com/users/jtleek/repos"))
#    stop_for_status(req)
#    content(req)
library(jsonlite)
json1 = content(req)
json2 = jsonlite::fromJSON(toJSON(json1))
names(json2)
df<-select(json2,name,created_at)
df
pos<-match("datasharing",df$name)
time_created<-df$created_at[pos]
print(paste("The datasharing repo was created at",time_created))
## Q2
#create sub-directory of the working dir called "data" if one does not exist already
library(sqldf)
#library(RMySQL) #DONT load this package!!!!
if(!file.exists("data")){
dir.create("data")
}
#download data if not yet already done so
if(!file.exists("./data/acs.csv")){
#download a data file as csv in the "data" dir
#on Mac, need method="curl" if url starts with https:
fileURL<-"https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06pid.csv"
download.file(fileURL,destfile="./data/acs.csv")
#include date of download
datedownloaded<-date()
datedownloaded
}
#load data into R df
acs<-read.csv("./data/acs.csv")
#try to get pwgtp1 for which AGEP<50
# without using sqldf
dat<-select(acs,AGEP,pwgtp1)
dat50<-filter(dat,AGEP<50)
str(dat50)
#now do it using sqldf
sdat50<-sqldf("select pwgtp1 from acs where AGEP < 50")
str(dat50)
## Q3
#without sqldf
un<-uique(acs$AGEP)
str(un)
summary(un)
#with sqldf
unq<-sqldf("select distinct AGEP from acs")
str(unq)
summary(unq)
## Q4
# How many characters are in the 10th, 20th, 30th and 100th lines of HTML from this page:
# http://biostat.jhsph.edu/~jleek/contact.html
# (Hint: the nchar() function in R may be helpful)
con = url("http://biostat.jhsph.edu/~jleek/contact.html")
htmlcode = readLines(con)
close(con)
nchar(htmlcode[10])
nchar(htmlcode[20])
nchar(htmlcode[30])
nchar(htmlcode[100])
## Q5
#read a fixed width file into R and sum a column
#url is "https://d396qusza40orc.cloudfront.net/getdata%2Fwksst8110.for"
#download data if not yet already done so and have a look at it in NotePad
# create data folder in working dir, if one is not already there
if(!file.exists("data")){
dir.create("data")
}
#download data file into data file, unless it is already there.
if(!file.exists("./data/q5.for")){
fileURL<-"https://d396qusza40orc.cloudfront.net/getdata%2Fwksst8110.for"
download.file(fileURL,destfile="./data/q5.for")
#include date of download
datedownloaded<-date()
datedownloaded
}
# have a look at file in NotePad++ to determine column widths
# column widths are c(15, 4,4, 9,4, 9,4, 9,4)
df<-read.fwf(file="https://d396qusza40orc.cloudfront.net/getdata%2Fwksst8110.for",
widths=c(15, 4,4, 9,4, 9,4, 9,4),
header=FALSE,
skip=4,
)
sum(df[,4])
## Q3
#without sqldf
un<-unique(acs$AGEP)
str(un)
summary(un)
