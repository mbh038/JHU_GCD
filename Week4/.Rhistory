# should all be 1e-6, 1e-3 or 1
table(sd.redd$PROPDMGEXP)
table(sd.redd$CROPDMGEXP)
#sd.redd$PROPDMG<-sd.redd$PROPDMG*sd.redd$PROPDMGEXP
#sd.redd$CROPDMG<-sd.redd$CROPDMG*sd.redd$CROPDMGEXP
# Add the mapped weather type vector to the reduced data set
sd.red<-data.frame(select(sd.red,year:EVTYPE),
event,
select(sd.red,FATALITIES:CROPDMGEXP),
stringsAsFactors=FALSE)
# select for valid value multipliers
# select for valid value multipliers
sd.redd<-sd.red[grepl("[kK]|[mM]|[bB]|[^3]|[^5]",sd.red$PROPDMGEXP),]
sd.redd$PROPDMGEXP<-gsub("[^kK]|[^mM]|^[bB]",'0',sd.redd$PROPDMGEXP)
sd.redd<-sd.redd[grepl("[kK]|[mM]|[bB]",sd.redd$CROPDMGEXP),]
sd.redd$PROPDMGEXP<-gsub("3|5","0.000001",sd.redd$PROPDMGEXP) #remove pesky 3 and 5
# express damage mulipliers in billions of dollars
sd.redd$PROPDMGEXP<-gsub("[kK]","0.000001",sd.redd$PROPDMGEXP)
sd.redd$PROPDMGEXP<-gsub("[mM]","0.001",sd.redd$PROPDMGEXP)
sd.redd$PROPDMGEXP<-gsub("[bB]","1",sd.redd$PROPDMGEXP)
sd.redd$PROPDMGEXP<-as.numeric(sd.redd$PROPDMGEXP)
sd.redd$CROPDMGEXP<-gsub("[kK]","0.000001",sd.redd$CROPDMGEXP)
sd.redd$CROPDMGEXP<-gsub("[mM]","0.001",sd.redd$CROPDMGEXP)
sd.redd$CROPDMGEXP<-gsub("[bB]","1",sd.redd$CROPDMGEXP)
sd.redd$CROPDMGEXP<-as.numeric(sd.redd$CROPDMGEXP)
# check replacements are complete
# should all be 1e-6, 1e-3 or 1
table(sd.redd$PROPDMGEXP)
table(sd.redd$CROPDMGEXP)
#sd.redd$PROPDMG<-sd.redd$PROPDMG*sd.redd$PROPDMGEXP
#sd.redd$CROPDMG<-sd.redd$CROPDMG*sd.redd$CROPDMGEXP
# Add the mapped weather type vector to the reduced data set
sd.red<-data.frame(select(sd.red,year:EVTYPE),
event,
select(sd.red,FATALITIES:CROPDMGEXP),
stringsAsFactors=FALSE)
# select for valid value multipliers
# select for valid value multipliers
sd.redd<-sd.red[grepl("[kK]|[mM]|[bB]|[^3]|[^5]",sd.red$PROPDMGEXP),]
sd.redd$PROPDMGEXP<-gsub("[^kK][^mM][^bB]",'0',sd.redd$PROPDMGEXP)
sd.redd<-sd.redd[grepl("[kK]|[mM]|[bB]",sd.redd$CROPDMGEXP),]
sd.redd$PROPDMGEXP<-gsub("3|5","0.000001",sd.redd$PROPDMGEXP) #remove pesky 3 and 5
# express damage mulipliers in billions of dollars
sd.redd$PROPDMGEXP<-gsub("[kK]","0.000001",sd.redd$PROPDMGEXP)
sd.redd$PROPDMGEXP<-gsub("[mM]","0.001",sd.redd$PROPDMGEXP)
sd.redd$PROPDMGEXP<-gsub("[bB]","1",sd.redd$PROPDMGEXP)
sd.redd$PROPDMGEXP<-as.numeric(sd.redd$PROPDMGEXP)
sd.redd$CROPDMGEXP<-gsub("[kK]","0.000001",sd.redd$CROPDMGEXP)
sd.redd$CROPDMGEXP<-gsub("[mM]","0.001",sd.redd$CROPDMGEXP)
sd.redd$CROPDMGEXP<-gsub("[bB]","1",sd.redd$CROPDMGEXP)
sd.redd$CROPDMGEXP<-as.numeric(sd.redd$CROPDMGEXP)
# check replacements are complete
# should all be 1e-6, 1e-3 or 1
table(sd.redd$PROPDMGEXP)
table(sd.redd$CROPDMGEXP)
#sd.redd$PROPDMG<-sd.redd$PROPDMG*sd.redd$PROPDMGEXP
#sd.redd$CROPDMG<-sd.redd$CROPDMG*sd.redd$CROPDMGEXP
# Add the mapped weather type vector to the reduced data set
sd.red<-data.frame(select(sd.red,year:EVTYPE),
event,
select(sd.red,FATALITIES:CROPDMGEXP),
stringsAsFactors=FALSE)
# select for valid value multipliers
# select for valid value multipliers
sd.redd<-sd.red[grepl("[kK]|[mM]|[bB]|[^3]|[^5]",sd.red$PROPDMGEXP),]
sd.redd$PROPDMGEXP<-gsub("[^kK][^mM][^bB]",'0',sd.redd$PROPDMGEXP)
sd.redd<-sd.redd[grepl("[kK]|[mM]|[bB]",sd.redd$CROPDMGEXP),]
sd.redd$PROPDMGEXP<-gsub("3|5","0.000001",sd.redd$PROPDMGEXP) #remove pesky 3 and 5
# express damage mulipliers in billions of dollars
sd.redd$PROPDMGEXP<-gsub("[kK]","0.000001",sd.redd$PROPDMGEXP)
sd.redd$PROPDMGEXP<-gsub("[mM]","0.001",sd.redd$PROPDMGEXP)
sd.redd$PROPDMGEXP<-gsub("[bB]","1",sd.redd$PROPDMGEXP)
sd.redd$PROPDMGEXP<-as.numeric(sd.redd$PROPDMGEXP)
sd.redd$CROPDMGEXP<-gsub("[kK]","0.000001",sd.redd$CROPDMGEXP)
sd.redd$CROPDMGEXP<-gsub("[mM]","0.001",sd.redd$CROPDMGEXP)
sd.redd$CROPDMGEXP<-gsub("[bB]","1",sd.redd$CROPDMGEXP)
sd.redd$CROPDMGEXP<-as.numeric(sd.redd$CROPDMGEXP)
# check replacements are complete
# should all be 1e-6, 1e-3 or 1
table(sd.redd$PROPDMGEXP)
table(sd.redd$CROPDMGEXP)
sd.redd$PROPDMG<-sd.redd$PROPDMG*sd.redd$PROPDMGEXP
sd.redd$CROPDMG<-sd.redd$CROPDMG*sd.redd$CROPDMGEXP
summary(st.redd$PROPDMG)
summary(sd.redd$PROPDMG)
summary(sd.redd$CROPDMG)
tfatalities <-sum(sd.red$FATALITIES)
tinjuries<-sum(sd.red$INJURIES)
ttotal<-tfatalities+tinjuries
tpropdmg <-sum(sd.redd$PROPDMG)
tcropdmg <-sum(sd.redd$CROPDMG)
dtotal<-tpropdmg+tcropdmg
#find fatality and injury number for each event type
fatalities<-sd.red %>% group_by(event) %>% summarise(fatalities=sum(FATALITIES))
injuries<-sd.red %>% group_by(event) %>% summarise(injuries=sum(INJURIES))
human<-left_join(fatalities,injuries,by="event")
human<-mutate(human,total=fatalities+injuries)
# add a totals row at the top
human<-arrange(human,desc(total))
totals<-data.frame("Total",tfatalities,tinjuries,ttotal)
names(totals)<-names(human)
human<-rbind(totals,human)
# calculate each row as % of total
fatfrac<-100*human$fatalities/ttotal
injfrac<-100*human$injuries/ttotal
totfrac<-100*human$total/ttotal
# calculate sum contribution of top 5.
top10frac<-sum(fatfrac[2:11])
top10inj<-sum(injfrac[2:11])
top10tot<-sum(totfrac[2:11])
# combine for reults table
human<-cbind(human,fatfrac,injfrac,totfrac)
human$event<-as.character(human$event)
humantop10<-human[1:11,]
names(humantop10)[names(humantop10)=="fatfrac"] <- "Fatalities"
names(humantop10)[names(humantop10)=="injfrac"] <- "Injuries"
# melt data for plot
library(reshape2)
hmelt<-melt(humantop10,id="event",measure.vars=c("Fatalities","Injuries"))
hmelt$event<-as.factor(hmelt$event)
hmelt$variable<-as.factor(hmelt$variable)
hmelt<-arrange(hmelt,desc(variable),desc(value))
## set the levels in order we want
hmelt <- transform(hmelt,
event.ord  = factor(
event ,
levels=c( 'Hurricane','Winter Storm','High Wind','Ice Storm','Other','Lightning','Flood','Thunderstorm Wind', 'Heat','Tornado','Total'),
ordered =TRUE))
#find property and crop damage value for each event type
propdmg<-sd.redd %>% group_by(event) %>% summarise(propdmg=sum(PROPDMG))
cropdmg<-sd.redd %>% group_by(event) %>% summarise(cropdmg=sum(CROPDMG))
damage<-left_join(propdmg,cropdmg,by="event")
damage<-mutate(damage,totald=propdmg+cropdmg)
# add a totals row at the top
damage<-arrange(damage,desc(totald))
totalsd<-data.frame("Total",tpropdmg,tcropdmg,dtotal)
names(totalsd)<-names(damage)
damage<-rbind(totalsd,damage)
# calculate each row as % of total
propfrac<-100*damage$propdmg/dtotal
cropfrac<-100*damage$cropdmg/dtotal
dtotfrac<-100*damage$totald/dtotal
# calculate sum contribution of top 5.
dtop10prop<-sum(propfrac[2:11])
dtop10crop<-sum(cropfrac[2:11])
dtop10tot<-sum(dtotfrac[2:11])
# combine for reults table
damage<-cbind(damage,propfrac,cropfrac,dtotfrac)
damage$event<-as.character(damage$event)
damagetop10<-damage[1:11,]
names(damagetop10)[names(damagetop10)=="propfrac"] <- "Property"
names(damagetop10)[names(damagetop10)=="cropfrac"] <- "Crops"
# melt data for plot
library(reshape2)
dmelt<-melt(damagetop10,id="event",measure.vars=c("Property","Crops"))
dmelt$event<-as.factor(dmelt$event)
dmelt$variable<-as.factor(dmelt$variable)
dmelt<-arrange(dmelt,desc(variable),desc(value))
## set the levels in order we want
dmelt <- transform(dmelt,
eventd.ord  = factor(
event ,
levels=c( 'Strong Wind','Other','Wildfire','Winter Storm', 'High Wind','Lightning','Tornado','Hail','Thunderstorm Wind','Flood','Total'),
ordered =TRUE))
#g<-ggplot(data=hmelt, aes(x=event, y=value, fill=variable)) +
#   geom_bar(stat="identity", position=position_dodge())
g<-ggplot(data=hmelt,
aes(x=event.ord,y=value,fill=variable,order=event.ord))+
geom_bar(stat="identity")+
#facet_wrap(~variable)+
coord_flip()+
scale_y_continuous(breaks = seq(0, 100, 10))+
theme(axis.text.x = element_text(size=14),
axis.text.y=element_text(size=14))+
labs(y = "% of total fatalities and injuries")+
theme(axis.title.x = element_text(size=14,vjust=-.5),
axis.title.y=element_blank())+
theme(legend.text=element_text(size=12),
legend.title = element_blank())+
theme(legend.position=c(.8, .2))
g
d<-ggplot(data=dmelt,
aes(x=eventd.ord, y=value,fill=variable,order=eventd.ord))+
geom_bar(stat="identity")+
#facet_wrap(~variable)+
coord_flip()+
scale_y_continuous(breaks = seq(0, 100, 10))+
theme(axis.text.x = element_text(size=14),
axis.text.y=element_text(size=14))+
labs(y = "% of total Value of damage caused")+
theme(axis.title.x = element_text(size=14,vjust=-.5),
axis.title.y=element_blank())+
theme(legend.text=element_text(size=12),
legend.title = element_blank())+
theme(legend.position=c(.8, .2))
d
damage
# melt data for plot
library(reshape2)
dmelt<-melt(damagetop10,id="event",measure.vars=c("Property","Crops"))
dmelt$event<-as.factor(dmelt$event)
dmelt$variable<-as.factor(dmelt$variable)
dmelt<-arrange(dmelt,desc(variable),desc(value))
## set the levels in order we want
dmelt <- transform(dmelt,
eventd.ord  = factor(
event ,
levels=c( 'Drought','High Wind','Wildfire','Storm Surge/Tide', 'Thunderstorm Wind','Ice Storm','Hail','Tornado','Hurricane','Flood','Total'),
ordered =TRUE))
#g<-ggplot(data=hmelt, aes(x=event, y=value, fill=variable)) +
#   geom_bar(stat="identity", position=position_dodge())
g<-ggplot(data=hmelt,
aes(x=event.ord,y=value,fill=variable,order=event.ord))+
geom_bar(stat="identity")+
#facet_wrap(~variable)+
coord_flip()+
scale_y_continuous(breaks = seq(0, 100, 10))+
theme(axis.text.x = element_text(size=14),
axis.text.y=element_text(size=14))+
labs(y = "% of total fatalities and injuries")+
theme(axis.title.x = element_text(size=14,vjust=-.5),
axis.title.y=element_blank())+
theme(legend.text=element_text(size=12),
legend.title = element_blank())+
theme(legend.position=c(.8, .2))
g
d<-ggplot(data=dmelt,
aes(x=eventd.ord, y=value,fill=variable,order=eventd.ord))+
geom_bar(stat="identity")+
#facet_wrap(~variable)+
coord_flip()+
scale_y_continuous(breaks = seq(0, 100, 10))+
theme(axis.text.x = element_text(size=14),
axis.text.y=element_text(size=14))+
labs(y = "% of total Value of damage caused")+
theme(axis.title.x = element_text(size=14,vjust=-.5),
axis.title.y=element_blank())+
theme(legend.text=element_text(size=12),
legend.title = element_blank())+
theme(legend.position=c(.8, .2))
d
install.packages("pander")
as.integer(6.7)
library(ggplot2)
par(mfrow = c(1, 2))
par(mar = c(3, 4,3,1))
par(bg="white")
with(annual.totals,plot(Year,Fatalities.Injuries,
xlim=c(1950,2020),
ylim=c(0,max(annual.totals$Fatalities.Injuries)),
xlab="Year",
ylab="Annual fatalities and Injuries",
pch=19,
col="red",
#main="Fatalities / Injuries"
)
)
with(annual.totals,plot(Year,Damage,
xlim=c(1950,2020),
ylim=c(0,max(annual.totals$Damage)),
xlab="Year",
ylab="Annual property and crop damage value ($) ",
pch=19,
col="blue",
#main="Property and crop damage ($)"
)
)
library(ggplot2)
par(mfrow = c(1, 2))
par(mar = c(3, 3,3,1))
par(bg="white")
with(annual.totals,plot(Year,Fatalities.Injuries,
xlim=c(1950,2020),
ylim=c(0,max(annual.totals$Fatalities.Injuries)),
xlab="Year",
ylab="Annual fatalities and Injuries",
pch=19,
col="red",
#main="Fatalities / Injuries"
)
)
with(annual.totals,plot(Year,Damage,
xlim=c(1950,2020),
ylim=c(0,max(annual.totals$Damage)),
xlab="Year",
ylab="Annual property and crop damage value ($) ",
pch=19,
col="blue",
#main="Property and crop damage ($)"
)
)
library(ggplot2)
par(mfrow = c(1, 2))
par(mar = c(4, 4,3,1))
par(bg="white")
with(annual.totals,plot(Year,Fatalities.Injuries,
xlim=c(1950,2020),
ylim=c(0,max(annual.totals$Fatalities.Injuries)),
xlab="Year",
ylab="Annual fatalities and Injuries",
pch=19,
col="red",
#main="Fatalities / Injuries"
)
)
with(annual.totals,plot(Year,Damage,
xlim=c(1950,2020),
ylim=c(0,max(annual.totals$Damage)),
xlab="Year",
ylab="Annual property and crop damage value ($) ",
pch=19,
col="blue",
#main="Property and crop damage ($)"
)
)
file.edit('~/.Rprofile')
}
## Solutions to JHU GCD Quiz 3
## Author: Michael Hunt
## Question One
library(dplyr)
# data file URL
# https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06hid.csv
# code book URL
# https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FPUMSDataDict06.pdf
# Download data
if(!file.exists("data")){
dir.create("data")
}
## Question One
# download data if not yet already done so
if(!file.exists("./data/Idaho2006.csv")){
#download a data file as csv into the "data" dir
fileURL<-"https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06hid.csv"
download.file(fileURL,destfile="./data/idaho2006.csv")
#include date of download
datedownloaded<-date()
datedownloaded
}
# download code file if not already done so
if(!file.exists("./data/idaho2006_code.pdf")){
#- note set mode to "wb" since it is a pdf
codefileURL<-"https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FPUMSDataDict06.pdf"
download.file(codefileURL,destfile="./data/idaho2006_code.pdf",mode="wb")
#include date of download
datedownloadedq1<-date()
datedownloadedq1
}
# read csv file into dataframe
Idaho2006<-read.csv("./data/idaho2006.csv")
# Create a logical vector that identifies the households on greater than 10 acres
# who sold more than $10,000 worth of agriculture products. Assign that logical
# vector to the variable agricultureLogical. Apply the which() function like this
# to identify the rows of the data frame where the logical vector is TRUE.
# which(agricultureLogical)
# What are the first 3 values that result?
# from code book, column ACR is plot zsize, value = 3 => more than 10 acres,
# column AGS is sales of agriculturral products, value = 6 => more than $10,000
agriculturalLogical<-which(Idaho2006$ACR==3 & Idaho2006$AGS==6)
agriculturalLogical[1:3]
str(agriculturalLogical)
Idaho2006[agriculturalLogical[1:3],"ACR"]
Idaho2006[agriculturalLogical[1:3],"AGS"]
## Question Two
# Using the jpeg package read in the following picture of your instructor into R
# https://d396qusza40orc.cloudfront.net/getdata%2Fjeff.jpg
# Use the parameter native=TRUE. What are the 30th and 80th quantiles of the
# resulting data?
# (some Linux systems may produce an answer 638 different for the 30th quantile)
# For documentation, see http://cran.r-project.org/web/packages/jpeg/jpeg.pdf
library(jpeg)
# read in the jpeg file
if(!file.exists("./data/jeff4.jpg")){
#- note set mode to "wb" since it is a binary file (pdf, jpeg etc)
fileURL<-"https://d396qusza40orc.cloudfront.net/getdata%2Fjeff.jpg"
download.file(fileURL,destfile="./data/jeff.jpg",mode="wb")
#include date of download
datedownloadedq2<-date()
datedownloadedq2
}
jeff<-readJPEG("./data/jeff.jpg",native=TRUE)
quantile(jeff,probs=c(.30,.80),include.lower=TRUE)
## Question Three
# load the GDP file
# download GDP data if not yet already done so
if(!file.exists("./data/GDP.csv")){
#download a data file as csv into the "data" dir
fileURL<-"https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FGDP.csv"
download.file(fileURL,destfile="./data/GDP.csv")
#include date of download
datedownloaded<-date()
datedownloaded
}
# download EDU data if not yet already done so
if(!file.exists("./data/EDU.csv")){
#download a data file as csv into the "data" dir
fileURL<-"https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FEDSTATS_Country.csv"
download.file(fileURL,destfile="./data/EDU.csv")
#include date of download
datedownloaded<-date()
datedownloaded
}
# load csv files into R
gdp<-read.csv("./data/GDP.csv",stringsAsFactors=FALSE,skip=4)
edu<-read.csv("./data/EDU.csv",stringsAsFactors=FALSE)
# inspect dfs with head, tail, str, summary
# on that basis....
# get df gdp into shape:
# rename the rank and gdp columns
gdp<-rename(gdp,rank=X.1,country=X.3,gdp=X.4)
# make them both numeric - watch the commas in the gdp column!
gdp$rank<-as.numeric(gdp$rank)
gdp$gdp<-as.numeric(gsub(",","",gdp$gdp))
# filter out rows with no rank
gdp<-gdp[!(is.na(gdp$rank)),]
# keep only the columns we need
gdp<-select(gdp,X,rank,country,gdp)
#How many ranked countries in gdp are in the edu file?
in.both<-sum(gdp$X %in% edu$CountryCode)
in.both
# sort gdp in descending order of gdp
gdp_sorted<-arrange(gdp,gdp)
gdp_sorted[13,]
## Question Four
# uses same gdp and edu data frames as last question
# keep only the columns we need in edu
edu<-select(edu,CountryCode,Income.Group)
# merge gdp and edu, using country code as id.
gdp.edu<-merge(gdp,edu,by.x="X",by.y="CountryCode")
# find average income of high income groups
gdp.edu %>% group_by(Income.Group) %>% summarise(avg=mean(rank))
ungroup(gdp.edu)
## Question Five
gdp.edu$rankGroups = cut(gdp.edu$rank,breaks=quantile(gdp.edu$rank,
probs=c(0,0.2,0.4,0.6,0.8,1.0)),
include.lowest=TRUE)
table(gdp.edu$rankGroups)
table(gdp.edu$rankGroups,gdp.edu$Income.Group)
## Solutions to JHU GCD Quiz 4
## Author: Michael Hunt
## Question One
library(dplyr)
# data file URL
# https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06hid.csv
# code book URL
# https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FPUMSDataDict06.pdf
# Download data
if(!file.exists("data")){
dir.create("data")
}
## Question One
# Apply strsplit() to split all the names of the data frame on the
# characters "wgtp".
# What is the value of the 123 element of the resulting list?
# download data if not yet already done so
if(!file.exists("./data/Idaho2006.csv")){
#download a data file as csv into the "data" dir
fileURL<-"https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06hid.csv"
download.file(fileURL,destfile="./data/idaho2006.csv")
#include date of download
datedownloaded<-date()
datedownloaded
}
# download code file if not already done so
if(!file.exists("./data/idaho2006_code.pdf")){
#- note set mode to "wb" since it is a pdf
codefileURL<-"https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FPUMSDataDict06.pdf"
download.file(codefileURL,destfile="./data/idaho2006_code.pdf",mode="wb")
#include date of download
datedownloadedq1<-date()
datedownloadedq1
}
# read csv file into dataframe
Idaho2006<-read.csv("./data/idaho2006.csv")
## Solutions to JHU GCD Quiz 4
## Author: Michael Hunt
## Question One
library(dplyr)
# data file URL
# https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06hid.csv
# code book URL
# https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FPUMSDataDict06.pdf
# Set working directory
setwd("C:/Users/Mike/Rspace/JHU_GCD/Week4")
# Download data
if(!file.exists("data")){
dir.create("data")
}
## Question One
# Apply strsplit() to split all the names of the data frame on the
# characters "wgtp".
# What is the value of the 123 element of the resulting list?
# download data if not yet already done so
if(!file.exists("./data/Idaho2006.csv")){
#download a data file as csv into the "data" dir
fileURL<-"https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06hid.csv"
download.file(fileURL,destfile="./data/idaho2006.csv")
#include date of download
datedownloaded<-date()
datedownloaded
}
# download code file if not already done so
if(!file.exists("./data/idaho2006_code.pdf")){
#- note set mode to "wb" since it is a pdf
codefileURL<-"https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FPUMSDataDict06.pdf"
download.file(codefileURL,destfile="./data/idaho2006_code.pdf",mode="wb")
#include date of download
datedownloadedq1<-date()
datedownloadedq1
}
# read csv file into dataframe
Idaho2006<-read.csv("./data/idaho2006.csv")
